<?xml version="1.0" encoding="UTF-8" ?>
         <root>
           <items>
              <item><subjectid>180</subjectid><userid>cs11054</userid><taskid>1</taskid><caption></caption><body>public class FizzBuzz {&#xA;&#xA;	public static final int MAX = 30;&#xA;	&#xA;	public static void main(String[] args) {&#xA;&#xA;		StringBuilder sb = new StringBuilder();&#xA;		&#xA;		// 速度重視(意味あるか不明)&#xA;		for (int i = 1; i &lt;= MAX; i++) {&#xA;			if(i%3==0 &amp;&amp; i%5==0) sb.append(&quot;Fizz Buzz &quot;);&#xA;			else if(i%3==0) sb.append(&quot;Fizz &quot;);&#xA;			else if(i%5==0) sb.append(&quot;Buzz &quot;);&#xA;			else sb.append(i).append(&quot; &quot;);&#xA;		}&#xA;		&#xA;		sb.deleteCharAt(sb.length()-1);	// 最後の空白を削除&#xA;		System.out.println(sb.toString());&#xA;		&#xA;	}&#xA;}</body><date>1417161153993</date><viewid>cs11054</viewid></item><item><subjectid>179</subjectid><userid>cs11054</userid><taskid>1</taskid><caption></caption><body>import java.util.Set;&#xA;import java.util.HashSet;&#xA;import java.util.InputMismatchException;&#xA;import java.util.Scanner;&#xA;&#xA;public class LifeGame {&#xA;&#xA;	private static final int SIDE = 32; // 辺の長さ&#xA;	private static final long WAIT_TIME = 200; // 変化の速度&#xA;	private static final int JUDGE_TABEL[][] = { { 0, 0, 0, 1, 0, 0, 0, 0, 0 },&#xA;			{ 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 } };&#xA;	private static final String squares[] = { &quot;x&quot;, &quot;o&quot; };&#xA;	private int nowMap[][] = new int[1 + SIDE + 1][1 + SIDE + 1];&#xA;	private int nextMap[][] = new int[1 + SIDE + 1][1 + SIDE + 1];&#xA;&#xA;	// 生死判定&#xA;	private void deadOrAlive() {&#xA;		int temp[][];&#xA;		for (int i = 1; i &lt; SIDE - 1; i++) {&#xA;			for (int j = 1; j &lt; SIDE - 1; j++) {&#xA;				nextMap[i][j] = JUDGE_TABEL[nowMap[i][j]][nowMap[i - 1][j - 1]&#xA;						+ nowMap[i - 1][j] + nowMap[i - 1][j + 1]&#xA;						+ nowMap[i][j - 1] + nowMap[i][j + 1]&#xA;						+ nowMap[i + 1][j - 1] + nowMap[i + 1][j]&#xA;						+ nowMap[i + 1][j + 1]];&#xA;			}&#xA;		}&#xA;		temp = nowMap;&#xA;		nowMap = nextMap;&#xA;		nextMap = temp;&#xA;	}&#xA;&#xA;	// 変化後のMAPを文字列表現として返す&#xA;	private String mapString() {&#xA;		StringBuilder sb = new StringBuilder();&#xA;		for (int i = 1; i &lt; SIDE - 1; i++) {&#xA;			for (int j = 1; j &lt; SIDE - 1; j++) {&#xA;				sb.append(squares[nowMap[i][j]]);&#xA;			}&#xA;			sb.append(&quot;\n&quot;);&#xA;		}&#xA;		sb.append(&quot;\n&quot;);&#xA;		return sb.toString();&#xA;	}&#xA;&#xA;	// MAPの初期化&#xA;	private void creatMap() {&#xA;		Scanner scan = new Scanner(System.in);&#xA;		double bornPossibility = 0;&#xA;		System.out.println(&quot;生命が誕生する確率を決めてください(1-100)。不正な値の場合はランダムで生成されます。&quot;);&#xA;		try {&#xA;			bornPossibility = scan.nextDouble();&#xA;		} catch (InputMismatchException e) {&#xA;		}&#xA;&#xA;		if (1 &gt; bornPossibility || bornPossibility &gt; 100) {&#xA;			bornPossibility = Math.random() * 100;&#xA;		}&#xA;		bornPossibility /= 100;&#xA;		for (int i = 1; i &lt; SIDE - 1; i++) {&#xA;			for (int j = 1; j &lt; SIDE - 1; j++) {&#xA;				nowMap[i][j] = (bornPossibility &gt; Math.random()) ? 1 : 0;&#xA;			}&#xA;		}&#xA;	}&#xA;&#xA;	// ゲームスタート&#xA;	private void startGame() {&#xA;		Set&lt;Integer&gt; sets = new HashSet&lt;Integer&gt;();&#xA;		String newMap;&#xA;		int generationCount = 1;&#xA;		creatMap();&#xA;		newMap = mapString();&#xA;		try {&#xA;			do {&#xA;				System.out.println(&quot;----------第&quot; + generationCount++&#xA;						+ &quot;世代----------\n&quot; + newMap);&#xA;				sets.add(newMap.hashCode());&#xA;				deadOrAlive();&#xA;				Thread.sleep(WAIT_TIME);&#xA;				newMap = mapString();&#xA;			} while (!sets.contains(newMap.hashCode()));&#xA;		} catch (Exception e) {&#xA;			System.err.println(&quot;エラー&quot; + e.getMessage());&#xA;			System.exit(0);&#xA;		}&#xA;		System.out.println(&quot;第&quot; + --generationCount + &quot;世代で以前と同じパターンが出現しました。&quot;);&#xA;	}&#xA;&#xA;	public static void main(String args[]) {&#xA;		LifeGame exe = new LifeGame();&#xA;		exe.startGame();&#xA;	}&#xA;&#xA;}</body><date>1417161161898</date><viewid>??-31687754</viewid></item><item><subjectid>180</subjectid><userid>cs22054</userid><taskid>1</taskid><caption>aaa</caption><body>public class FizzBuzz {&#xA;&#xA;	public static final int MAX = 30;&#xA;	&#xA;	public static void main(String[] args) {&#xA;&#xA;		StringBuilder sb = new StringBuilder();&#xA;		&#xA;		// 速度重視(意味あるか不明)&#xA;		for (int i = 1; i &lt;= MAX; i++) {&#xA;			if(i%3==0 &amp;&amp; i%5==0) sb.append(&quot;Fizz Buzz &quot;);&#xA;			else if(i%3==0) sb.append(&quot;Fizz &quot;);&#xA;			else if(i%5==0) sb.append(&quot;Buzz &quot;);&#xA;			else sb.append(i).append(&quot; &quot;);&#xA;		}&#xA;		&#xA;		sb.deleteCharAt(sb.length()-1);	// 最後の空白を削除&#xA;		System.out.println(sb.toString());&#xA;		&#xA;	}&#xA;}</body><date>1417163557183</date><viewid>cs22054</viewid></item>
           </items>
         </root>